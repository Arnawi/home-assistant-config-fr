######################################################################################################################    
#  SYSTEME
######################################################################################################################    
- platform: systemmonitor
  resources:
    - type: last_boot
    - type: memory_use_percent
    - type: process    
    - type: processor_use
    - type: memory_free
    - type: disk_free
      arg: /

- platform: version    
  name: version  
  
- platform: time_date
  display_options:
    - 'time'
    - 'date'
    - 'date_time'
    - 'time_date'
    - 'time_utc'
    - 'beat'   

- platform: uptime
  name: Uptime
  scan_interval: 60
  unit_of_measurement: hours
           
   
######################################################################################################################    
#  WAQI
######################################################################################################################    
- platform: waqi
  token: !secret waqi_token
  locations: !secret waqi_location
  stations:  !secret waqi_stations
  
######################################################################################################################    
#  METEO
###################################################################################################################### 
- platform: darksky
  api_key: !secret dark_sky_key
  forecast:
    - 1
    - 2
    - 3
    - 4
    - 5
  monitored_conditions:
    - icon
    - summary
    - humidity
    - temperature
    - temperature_high
    - temperature_low
    - apparent_temperature
    - apparent_temperature_high
    - apparent_temperature_low
    - wind_speed
    - wind_bearing
    - precip_type
    - precip_probability
    - precip_accumulation
    - precip_intensity
    - precip_intensity_max
    - uv_index
    - daily_summary
    - pressure
    - visibility
  update_interval:
     minutes: 30
######################################################################################################################    
#  SYNOLOGY NAS
######################################################################################################################        
- platform: synologydsm
  host: 192.168.2.12
  username: !secret syno_name
  password: !secret syno_password
  monitored_conditions:
    - cpu_total_load
    - memory_real_usage
    - network_up
    - network_down
    - volume_percentage_used
    - volume_disk_temp_max

######################################################################################################################    
#  SONARR CARD
######################################################################################################################  
- platform: sonarr_upcoming_media
  api_key: !secret sonarr_key
  host: 192.168.2.12
  port: 8989
  days: 7
  ssl: false
  max: 5

######################################################################################################################    
#  MQTT
###################################################################################################################### 
  ###  TRACKS  ###
     
- platform: mqtt
  name: "Battery A5"
  state_topic: "zanzito/roman_a5/battery_level"
  qos: 0
  unit_of_measurement: "%"
  
- platform: mqtt
  name: "Battery TAB"
  state_topic: "zanzito/roman_tab/battery_level"
  qos: 0
  unit_of_measurement: "%"

  
  ###  SONOFF  ###
#- platform: mqtt
#  name: "Room Temp"
#  state_topic: "tele/sonoffTemp/SENSOR"
#  value_template: "{{ value_json.AM2301.Temperature }}"
#  unit_of_measurement: "°C"
#  qos: 1    
  
#- platform: mqtt
#  name: "Room Hum"
#  state_topic: "tele/sonoffTemp/SENSOR"
#  value_template: "{{ value_json.AM2301.Humidity }}"
#  unit_of_measurement: "%"
#  qos: 1     
   
######################################################################################################################    
#  TPLINK SWITCH
###################################################################################################################### 
- platform: template
  sensors:
    current_power_usage:
      value_template: '{%- if not is_state("sensor.tplink_1_current_power_w","unknown") -%}  {{ ((states.sensor.tplink_1_current_power_w.state | float) + (states.sensor.tplink_2_current_power_w.state | float)) | round(2) }} {%- endif -%}' 
      friendly_name: 'Current power usage'
      unit_of_measurement: 'W'

    total_power_usage:
      value_template: '{%- if not is_state("sensor.tplink_1_total_energy_kwh","unknown") -%}  {{ ((states.sensor.tplink_1_total_energy_kwh.state | float) + (states.sensor.tplink_2_total_energy_kwh.state | float)) | round(2) }} {%- endif -%}' 
      friendly_name: 'Total power usage'
      unit_of_measurement: 'kW'

    today_power_usage:
      value_template: '{%- if not is_state("sensor.tplink_1_today_energy_kwh","unknown") -%}  {{ ((states.sensor.tplink_1_today_energy_kwh.state | float) + (states.sensor.tplink_2_today_energy_kwh.state | float)) | round(2) }} {%- endif -%}' 
      friendly_name: 'Today power usage'
      unit_of_measurement: 'kW'      
  
- platform: template
  sensors:  
    tplink_1_total_energy_kwh:
      value_template: '{{ states.switch.tplink_1.attributes["total_energy_kwh"] }}'
      unit_of_measurement: 'kW'      
    tplink_1_current_power_w:
      value_template: '{{ states.switch.tplink_1.attributes["current_power_w"] }}'
      unit_of_measurement: 'W'     
    tplink_1_today_energy_kwh:
      value_template: '{{ states.switch.tplink_1.attributes["today_energy_kwh"] }}'
      unit_of_measurement: 'kW'
  
    tplink_2_total_energy_kwh:
      value_template: '{{ states.switch.tplink_2.attributes["total_energy_kwh"] }}'
      unit_of_measurement: 'kW'      
    tplink_2_current_power_w:
      value_template: '{{ states.switch.tplink_2.attributes["current_power_w"] }}'
      unit_of_measurement: 'W'     
    tplink_2_today_energy_kwh:
      value_template: '{{ states.switch.tplink_2.attributes["today_energy_kwh"] }}'
      unit_of_measurement: 'kW'

######################################################################################################################    
#  TEMPLATE
###################################################################################################################### 
- platform: template
  sensors:
    zappiti_template:
      friendly_name: 'Zappiti'
      value_template: "{{ 'on' if is_state('device_tracker.9cf8dbee2419', 'home') else 'off' }}"
      icon_template: "{{ 'mdi:android' if is_state('device_tracker.9cf8dbee2419', 'home') else 'mdi:close-circle' }}"


    cuisine_template:
      friendly_name: 'Cuisine'
      value_template: "{{ 'Détecté' if is_state('binary_sensor.fibaro_system_fgms001zw5_motion_sensor_sensor', 'on') else 'RAS' }}"
      icon_template: "{{ 'mdi:run-fast' if is_state('binary_sensor.fibaro_system_fgms001zw5_motion_sensor_sensor', 'on') else 'mdi:run' }}"     


    couloir_template:
      friendly_name: 'Couloir présence'
      value_template: "{{ 'Détecté' if is_state('binary_sensor.motion_sensor_158d0001d556ae', 'on') else 'RAS' }}"
      icon_template: "{{ 'mdi:run-fast' if is_state('binary_sensor.motion_sensor_158d0001d556ae', 'on') else 'mdi:run' }}"           
      

    harmony_hub_template:
      friendly_name: 'Harmony Hub'
      value_template: "{{ 'on' if is_state('device_tracker.000420f6a1b5', 'home') else 'off' }}"
      icon_template: "{{ 'mdi:monitor' if is_state('device_tracker.000420f6a1b5', 'home') else 'mdi:close-circle' }}"
      

    synology_template:
      friendly_name: 'Synology'
      value_template: "{{ 'on' if is_state('device_tracker.diskstation', 'home') else 'off' }}"
      icon_template: "{{ 'mdi:monitor' if is_state('device_tracker.diskstation', 'home') else 'mdi:close-circle' }}"   
      

    qled_tv_template:
      friendly_name: 'Qled TV'
      value_template: "{{ 'on' if is_state('device_tracker.samsung', 'home') else 'off' }}"
      icon_template: "{{ 'mdi:monitor' if is_state('device_tracker.samsung', 'home') else 'mdi:close-circle' }}"   

- platform: template
  sensors:
    friendly_date:
      # Thursday June 10th, 2017
      friendly_name: "Today's Date"
      icon_template: mdi:calendar-today
      value_template: >-
        {% set date = states('sensor.date') %}
        {% set datetime = strptime(date, '%Y-%m-%d') %}
        {% set weekday = datetime.strftime('%A') %}
        {% set month = datetime.strftime('%B') %}
        {% set day = datetime.strftime('%d') | int %}
        {%
          set suffix = 'st' if (day % 10 == 1 and day != 11)
          else 'nd' if (day % 10 == 2 and day != 12)
          else 'rd' if (day % 10 == 3 and day != 13)
          else 'th'
        %}
        {{ weekday }} {{ month }} {{ day }}{{ suffix }}
        
    friendly_date_day:
      # Thu
      friendly_name: "Today's Day"
      icon_template: mdi:calendar-today
      friendly_name_template: >-
        {% set date = states('sensor.date') %}
        {% set datetime = strptime(date, '%Y-%m-%d') %}
        {{ datetime.strftime('%A') }}
      value_template: >-
        {% set date = states('sensor.date') %}
        {% set datetime = strptime(date, '%Y-%m-%d') %}
        {% set month = datetime.strftime('%B') %}
        {% set day = datetime.strftime('%d') | int %}
        {{ month }} {{ day }}
      
    time_template:
      friendly_name: 'Time'
      icon_template: mdi:clock
      value_template: >-
        {% set hour = states('sensor.time').split(':')[0] | int %}
        {% set minutes = states('sensor.time').split(':')[1] %}
        {{ hour }}:{{ minutes }}
      
    time_quarterly:
      friendly_name: Time
      icon_template: mdi:clock
      value_template: >-
        {% set hour = states('sensor.time').split(':')[0] | int %}
        {% set minutes = states('sensor.time').split(':')[1] | int %}
        {% if minutes >= 45 %}
          {% set minute = '45' %}
        {% elif minutes >= 30 %}
          {% set minute = '30' %}
        {% elif minutes >= 15 %}
          {% set minute = '15' %}
        {% else %}
          {% set minute = '00' %}
        {% endif %}
        {{ hour }}:{{ minute }}      
      
    since_last_boot_template:
      friendly_name: 'Uptime'
      icon_template: mdi:home-assistant
      value_template: >-
        {% set uptime = states('sensor.uptime') | float(-1) %}
        {% if uptime >= 0 %}
          {% set time = (3600 * uptime) | int %}
          {% set minutes = ((time % 3600) / 60) | int %}
          {% set hours = ((time % 86400) / 3600) | int %}
          {% set days = (time / 86400) | int %}
          {% if time < 60 %}
            {{ time }} seconds
          {% else %}
            {%- if days > 0 -%}
              {%- if days == 1 -%}
                1 day
              {%- else -%}
                {{ days }} days
              {%- endif -%}
            {%- endif -%}
            {%- if hours > 0 and days < 7 -%}
              {%- if days > 0 -%}
                {{ ', ' }}
              {%- endif -%}
              {%- if hours == 1 -%}
                1 hour
              {%- else -%}
                {{ hours }} hours
              {%- endif -%}
            {%- endif -%}
            {%- if days == 0 and minutes > 0 -%}
              {%- if hours > 0 -%}
                {{ ', ' }}{{ minutes }} min
              {%- else -%}
                {%- if minutes == 1 -%}
                  1 minute
                {%- else -%}
                  {{ minutes }} minutes
                {%- endif -%}
              {%- endif -%}
            {%- endif -%}
          {% endif %}
        {% else %}
          unknown
        {% endif %}     

        

###########################################################################################################################
# WAQI: Carbon monoxide
#
       
- platform: template
  sensors:
    aqi_stations:
      friendly_name: Stations AQI
      icon_template: mdi:radar
      entity_id:
        - sensor.time_quarterly
      value_template: >-
        {% set attribute = 'name' %}
        {% set max_hours_behind = 4 %}
        {% set cutoff = (as_timestamp(now())|int - max_hours_behind * 60 * 60) | timestamp_local %}
        {% set stations = states | selectattr('entity_id', 'in', state_attr('group.waqi', 'entity_id'))
                                 | rejectattr('attributes.time', 'lt', cutoff)
                                 | selectattr(attribute)
                                 | map(attribute=attribute)
                                 | join('|') %}
        {% if stations %}
          {{ stations }}
        {% endif %}
    aqi_stations_count:
      friendly_name: Stations AQI Nombre
      icon_template: mdi:radar
      value_template: >-
        {% set stations = states('sensor.aqi_stations') %}
        {% if stations != '' %}
          {{ stations.split('|') | length }}
        {% else %}
          0
        {% endif %}
#
# WAQI: Average
#
- platform: template
  sensors:
    aqi:
      friendly_name: Qualité de l'air
      icon_template: mdi:chemical-weapon
      entity_id:
        - sensor.time_quarterly
      value_template: >-
        {% set attribute = 'state' %}
        {% set max_hours_behind = 4 %}
        {% set cutoff = (as_timestamp(now())|int - max_hours_behind * 60 * 60) | timestamp_local %}
        {% set stations = states | selectattr('entity_id', 'in', state_attr('group.waqi', 'entity_id'))
                                 | rejectattr('attributes.time', 'lt', cutoff)
                                 | selectattr(attribute)
                                 | map(attribute=attribute)
                                 | map('float')
                                 | list %}
        {% if stations %}
          {{ (stations|sum / stations|length) | round }}
        {% else %}
          unknown
        {% endif %}
    aqi_friendly:
      friendly_name: Qualité de l'air
      icon_template: mdi:chemical-weapon
      value_template: >-
        {% set index = states('sensor.aqi') | float(-1) %}
        {% if index > 300 %}
          Hasardeux
        {% elif index > 200 %}
          Très mauvais
        {% elif index > 150 %}
          Mauvais
        {% elif index > 100 %}
          Mauvais pour les personnes sensibles
        {% elif index > 50 %}
          Modéré
        {% elif index >= 0 %}
          Bon
        {% else %}
          unknown
        {% endif %}
        
        
#
# WAQI: Particulate matter 2.5μm
#
- platform: template
  sensors:
    aqi_particles:
      friendly_name: PM2.5
      icon_template: mdi:chart-bubble
      unit_of_measurement: 'PPM'
      entity_id:
        - sensor.time_quarterly
      value_template: >-
        {% set attribute = 'attributes.pm_2_5' %}
        {% set max_hours_behind = 4 %}
        {% set cutoff = (as_timestamp(now())|int - max_hours_behind * 60 * 60) | timestamp_local %}
        {% set stations = states | selectattr('entity_id', 'in', state_attr('group.waqi', 'entity_id'))
                                 | rejectattr('attributes.time', 'lt', cutoff)
                                 | selectattr(attribute)
                                 | map(attribute=attribute)
                                 | map('float')
                                 | list %}
        {% if stations %}
          {{ (stations|sum / stations|length) | round }}
        {% else %}
          unknown
        {% endif %}
    aqi_particles_friendly:
      friendly_name: PM2.5
      icon_template: mdi:chart-bubble
      value_template: >-
        {% set pm25 = states('sensor.aqi_particles') | int(-1) %}
        {% if pm25 > 300 %}
          Hasardeux
        {% elif pm25 > 200 %}
          Très mauvais
        {% elif pm25 > 150 %}
          Mauvais
        {% elif pm25 > 100 %}
          Mauvais pour les personnes sensibles
        {% elif pm25 > 50 %}
          Modéré
        {% elif pm25 >= 0 %}
          Bon
        {% else %}
          unknown
        {% endif %}
#
# WAQI: Nitrogen dioxide
#
- platform: template
  sensors:
    aqi_nitrogen_dioxide:
      friendly_name: Dioxyde d'azote
      icon_template: mdi:car
      unit_of_measurement: 'PPM'
      entity_id:
        - sensor.time_quarterly
      value_template: >-
        {% set attribute = 'attributes.nitrogen_dioxide' %}
        {% set max_hours_behind = 4 %}
        {% set cutoff = (as_timestamp(now())|int - max_hours_behind * 60 * 60) | timestamp_local %}
        {% set stations = states | selectattr('entity_id', 'in', state_attr('group.waqi', 'entity_id'))
                                 | rejectattr('attributes.time', 'lt', cutoff)
                                 | selectattr(attribute)
                                 | map(attribute=attribute)
                                 | map('float')
                                 | list %}
        {% if stations %}
          {{ (stations|sum / stations|length) | round }}
        {% else %}
          unknown
        {% endif %}
    aqi_nitrogen_dioxide_friendly:
      friendly_name: Dioxyde d'azote
      icon_template: mdi:car
      value_template: >-
        {% set nox = states('sensor.aqi_nitrogen_dioxide') | int(-1) %}
        {% if nox > 300 %}
          Hors des mesures
        {% elif nox > 200 %}
          Très mauvais
        {% elif nox > 150 %}
          Mauvais
        {% elif nox > 100 %}
          Mauvais pour les personnes sensibles
        {% elif nox > 50 %}
          Modéré
        {% elif nox >= 0 %}
          Bon
        {% else %}
          unknown
        {% endif %}
#
# WAQI: Ozone
#
- platform: template
  sensors:
    aqi_ozone:
      friendly_name: Ozone
      icon_template: mdi:earth
      unit_of_measurement: 'PPM'
      entity_id:
        - sensor.time_quarterly
      value_template: >-
        {% set attribute = 'attributes.ozone' %}
        {% set max_hours_behind = 4 %}
        {% set cutoff = (as_timestamp(now())|int - max_hours_behind * 60 * 60) | timestamp_local %}
        {% set stations = states | selectattr('entity_id', 'in', state_attr('group.waqi', 'entity_id'))
                                 | rejectattr('attributes.time', 'lt', cutoff)
                                 | selectattr(attribute)
                                 | map(attribute=attribute)
                                 | map('float')
                                 | list %}
        {% if stations %}
          {{ (stations|sum / stations|length) | round }}
        {% else %}
          unknown
        {% endif %}
    aqi_ozone_friendly:
      friendly_name: Ozone
      icon_template: mdi:earth
      value_template: >-
        {% set ozone = states('sensor.aqi_ozone') | int(-1) %}
        {% if ozone > 300 %}
          Hasardeux
        {% elif ozone > 200 %}
          Très mauvais
        {% elif ozone > 150 %}
          Mauvais
        {% elif ozone > 100 %}
          Mauvais pour les personnes sensibles
        {% elif ozone > 50 %}
          Modéré
        {% elif ozone >= 0 %}
          Bon
        {% else %}
          unknown
        {% endif %}
#
# WAQI: Sulphur dioxide
#
- platform: template
  sensors:
    aqi_sulphur_dioxide:
      friendly_name: Dioxyde de soufre
      icon_template: mdi:factory
      unit_of_measurement: 'PPM'
      entity_id:
        - sensor.time_quarterly
      value_template: >-
        {% set attribute = 'attributes.sulfur_dioxide' %}
        {% set max_hours_behind = 4 %}
        {% set cutoff = (as_timestamp(now())|int - max_hours_behind * 60 * 60) | timestamp_local %}
        {% set stations = states | selectattr('entity_id', 'in', state_attr('group.waqi', 'entity_id'))
                                 | rejectattr('attributes.time', 'lt', cutoff)
                                 | selectattr(attribute)
                                 | map(attribute=attribute)
                                 | map('float')
                                 | list %}
        {% if stations %}
          {{ (stations|sum / stations|length) | round }}
        {% else %}
          unknown
        {% endif %}
    aqi_sulphur_dioxide_friendly:
      friendly_name: Dioxyde de soufre
      icon_template: mdi:factory
      value_template: >-
        {% set so2 = states('sensor.aqi_sulphur_dioxide') | int(-1) %}
        {% if so2 > 300 %}
          Hors des mesures
        {% elif so2 > 200 %}
          Très mauvais
        {% elif so2 > 150 %}
          Mauvais
        {% elif so2 > 100 %}
          Mauvais pour les personnes sensibles
        {% elif so2 > 50 %}
          Modéré
        {% elif so2 >= 0 %}
          Bon
        {% else %}
          unknown
        {% endif %}
 
 

- platform: template
  sensors:
    uv:
      friendly_name: Indice UV
      icon_template: mdi:sunglasses
      value_template: >-
        {{ states('sensor.dark_sky_uv_index') }}
    uv_friendly:
      friendly_name: Indice UV
      icon_template: mdi:sunglasses
      value_template: >-
        {% set uv = states('sensor.dark_sky_uv_index') | int(-1) %}
        {% if uv >= 11 %}
          Extreme
        {% elif uv >= 8 %}
          Very high
        {% elif uv >= 6 %}
          Elevé
        {% elif uv >= 3 %}
          Modéré
        {% elif uv >= 0 %}
          Faible
        {% else %}
          unknown
        {% endif %}   
   

